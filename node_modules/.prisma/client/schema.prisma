generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id       Int    @id @default(autoincrement())
  roleName String @unique @map("role_name")

  users User[]
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  roleId       Int      @map("role_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  role           UserRole        @relation(fields: [roleId], references: [id])
  transactions   Transaction[]
  stockMovements StockMovement[]
}

model Product {
  id                Int      @id @default(autoincrement())
  sku               String   @unique
  productName       String   @map("product_name")
  description       String?
  purchasePrice     Decimal  @default(0) @map("purchase_price")
  sellingPrice      Decimal  @default(0) @map("selling_price")
  currentStockQty   Int      @default(0) @map("current_stock_qty")
  minStockThreshold Int      @default(0) @map("min_stock_threshold")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  transactionItems TransactionItem[]
  stockMovements   StockMovement[]
}

model Transaction {
  id              Int             @id @default(autoincrement())
  transactionCode String          @unique @map("transaction_code")
  transactionType TransactionType
  totalAmount     Decimal         @map("total_amount")
  transactionDate DateTime        @default(now()) @map("transaction_date")
  buyerSellerName String?         @map("buyer_seller_name")
  notes           String?
  userId          Int             @map("user_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @default(now()) @map("updated_at")

  user  User              @relation(fields: [userId], references: [id])
  items TransactionItem[]
}

model TransactionItem {
  id                     Int     @id @default(autoincrement())
  transactionId          Int     @map("transaction_id")
  productId              Int     @map("product_id")
  quantity               Int
  unitPriceAtTransaction Decimal @map("unit_price_at_transaction")
  subtotal               Decimal

  transaction    Transaction     @relation(fields: [transactionId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  stockMovements StockMovement[]
}

model StockMovement {
  id                 Int          @id @default(autoincrement())
  productId          Int          @map("product_id")
  movementType       MovementType @map("movement_type")
  quantityChanged    Int          @map("quantity_changed")
  stockAfterMovement Int          @map("stock_after_movement")
  reason             String?
  transactionItemId  Int?         @map("transaction_item_id")
  movementDate       DateTime     @default(now()) @map("movement_date")
  userId             Int?         @map("user_id")

  product         Product          @relation(fields: [productId], references: [id])
  transactionItem TransactionItem? @relation(fields: [transactionItemId], references: [id])
  user            User?            @relation(fields: [userId], references: [id])
}

enum TransactionType {
  SALE
  PURCHASE
}

enum MovementType {
  IN
  OUT
}
